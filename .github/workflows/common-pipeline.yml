name: Common workflow
#run-name: 1.0.0

on:
  workflow_call:
#    inputs:
#      config-path:
#        required: true
#        type: string
#    secrets:
#      token:
#        required: true

jobs:
  BuildJob:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      apiVersion: ${{ steps.api_version.outputs.apiVersion }}
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event"
    - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

    - name: Check out repository code
      uses: actions/checkout@v4
#      with:
#        repository: ${{ github.repository }}
#        ref: main

    - name: Get version from pom
      run:  |
        pomVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    - name: Export api version
      id: api_version
#      run: echo "apiVersion=$pomVersion" >> "$GITHUB_OUTPUT"
      run: echo "apiVersion=1.0.0" >> "$GITHUB_OUTPUT"

    - run: echo "The version is $pomVersion"

    - shell: bash
      run: |
        git config --global user.email "cicd@company.com"
        git config --global user.name "MuleSoft Pipeline"
        pwd
        git commit --amend -m "Version 1.0.0"
        git push -f origin $GITHUB_REF

    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}
    - run: echo "This job's status is ${{ job.status }}."
    - shell: bash
      run: |
        echo ${{ steps.api_version.outputs.apiVersion }} > api-version.txt
    - name: Save apiVersion to file
      uses: actions/upload-artifact@v4
      with:
        name: api-version-from-file
        path: api-version.txt

  DeployDev:
    name: Deploy ${{ needs.BuildJob.outputs.apiVersion }} to DEV
    runs-on: ubuntu-latest
    outputs:
      apiVersion: ${{ steps.api_version.outputs.apiVersion }}    
    needs: BuildJob
    environment:
      name: DEV
      url: 'http://dev-api.copeland.com'
    steps:
    - env:
        API_VERSION: ${{ needs.BuildJob.outputs.apiVersion }}
      run: echo "$API_VERSION ..."
    - name: Deploy to DEV	  
      run: echo "Deploying to DEV environment version $API_VERSION ..."
    - name: Export api version
      id: api_version
#      run: echo "apiVersion=$pomVersion" >> "$GITHUB_OUTPUT"
      run: echo "apiVersion=1.0.0" >> "$GITHUB_OUTPUT"      
    - run: echo "This job's status is ${{ job.status }}."

# Use the template below to save the apiVersion to a file
    - name: Retrieve apiVersion from file
      uses: actions/download-artifact@v4
      with:
        name: api-version-from-file
    - shell: bash
      run: |
        apiVersionFromFile=`cat api-version.txt`
        echo value from file=$apiVersionFromFile

  DeploySit:
  # NOTE: if ${{ needs.BuildJob.outputs.apiVersion }} is used in the 'name' below, it will NOT work (possibly because BuildJob has ended by the time that DeploySit begins"
  # therefore, the workaround is to re-export the same apiVersion value from DeployDev job, and use with ${{ needs.DeployDev.outputs.apiVersion }}
    name: Deploy ${{ needs.DeployDev.outputs.apiVersion }} to SIT
    runs-on: ubuntu-latest
    needs: [DeployDev]
    environment:
      name: SIT
      url: 'http://sit-api.copeland.com'
    steps:
    - env:
        API_VERSION: ${{ needs.BuildJob.outputs.apiVersion }}
      run: echo "$API_VERSION ..."    
    - name: Deploy to SIT
      run: echo Deploying to SIT environment...
    - run: echo "This job's status is ${{ job.status }}."

# Use the template below to retrieve the apiVersion from a file
    - name: Retrieve apiVersion from file
      uses: actions/download-artifact@v4
      with:
        name: api-version-from-file
    - shell: bash
      run: |
        apiVersionFromFile=`cat api-version.txt`
        echo value from file=$apiVersionFromFile
    

